diff --git a/kernel/proc.c b/kernel/proc.c
index 9a0c4a4..e49fa80 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -34,12 +34,12 @@ procinit(void)
       // Allocate a page for the process's kernel stack.
       // Map it high in memory, followed by an invalid
       // guard page.
-      //char *pa = kalloc();
-      //if(pa == 0)
-      //  panic("kalloc");
-      //uint64 va = KSTACK((int) (p - proc));
-      //kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-      //p->kstack = va;
+      char *pa = kalloc();
+      if(pa == 0)
+        panic("kalloc");
+      uint64 va = KSTACK((int) (p - proc));
+      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+      p->kstack = va;
   }
   kvminithart();
 }
@@ -128,9 +128,9 @@ found:
     release(&p->lock);
     return 0;
   }
-  uint64 va = KSTACK((int) (p - proc));
-  kvmmap(va, (uint64)p->kernal_pagetable, PGSIZE, PTE_R | PTE_W);
-  p->kstack = va;
+  //uint64 va = KSTACK((int) (p - proc));
+  //kvmmap(va, (uint64)p->kernal_pagetable, PGSIZE, PTE_R | PTE_W);
+  //p->kstack = va;
 
   // Set up new context to start executing at forkret,
   // which returns to user space.
@@ -152,8 +152,8 @@ freeproc(struct proc *p)
   p->trapframe = 0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
-  if(p->kernal_pagetable)
-    proc_freepagetable(p->kernal_pagetable, p->sz);
+  //if(p->kernal_pagetable)
+  //  proc_freepagetable(p->kernal_pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -482,8 +482,8 @@ scheduler(void)
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
         // each process has each kernal root page that needs store
-        w_satp(MAKE_SATP(p->kernal_pagetable));
-        sfence_vma();
+        //w_satp(MAKE_SATP(p->kernal_pagetable));
+        //sfence_vma();
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -502,7 +502,7 @@ scheduler(void)
 #if !defined (LAB_FS)
     if(found == 0) {
       intr_on();
-      kvminithart();
+      //kvminithart();
       asm volatile("wfi");
     }
 #else
